# From ohmyzsh/lib/git.zsh
# Outputs the name of the current branch
# Usage example: git pull origin $(git_current_branch)
# Using '--quiet' with 'symbolic-ref' will not cause a fatal error (128) if
# it's not a symbolic ref, but in a Git repo.
prompt_git_branch() {
  local ref
  ref=$(command git symbolic-ref --quiet HEAD 2> /dev/null)
  local ret=$?
  if [[ $ret != 0 ]]; then
    [[ $ret == 128 ]] && return  # no git repo.
    ref=$(command git rev-parse --short HEAD 2> /dev/null) || return
  fi
  echo "[\ue0a0 ${ref#refs/heads/}]"
}

# When in a git repo, parse the path and underline the part in the repo
prompt_git_pathInRepo() {
    local full_path="$1"
	if git rev-parse --git-dir > /dev/null 2>&1; then
    	repo_top_dir_name=$(git rev-parse --show-toplevel)
        echo "%{[33m%}:${repo_top_dir_name%/*}/%B${repo_top_dir_name##*/}/$(git rev-parse --show-prefix)%b"
    else
    	echo "%{[33m%}:$full_path"
    fi
}

# From ohmyzsh/lib/git.zsh
# Gets the difference between the local and remote branches
prompt_git_remote_status() {
    local remote ahead behind git_remote_status git_remote_status_detailed
    remote=${$(command git rev-parse --verify ${hook_com[branch]}@{upstream} --symbolic-full-name 2>/dev/null)/refs\/remotes\/}
    if [[ -n ${remote} ]]; then
        ahead=$(command git rev-list ${hook_com[branch]}@{upstream}..HEAD 2>/dev/null | wc -l)
        behind=$(command git rev-list HEAD..${hook_com[branch]}@{upstream} 2>/dev/null | wc -l)

        if [[ $ahead -eq 0 ]] && [[ $behind -eq 0 ]]; then
            git_remote_status="equal"
        elif [[ $ahead -gt 0 ]] && [[ $behind -eq 0 ]]; then
            git_remote_status="ahead"
        elif [[ $behind -gt 0 ]] && [[ $ahead -eq 0 ]]; then
            git_remote_status="behind"
        elif [[ $ahead -gt 0 ]] && [[ $behind -gt 0 ]]; then
            git_remote_status="diverged"
        fi

        echo $git_remote_status
    fi
}
